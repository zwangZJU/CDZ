<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- base_role[base_role]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2016-12-25 00:57:11 -->
<mapper namespace="aos.system.dao.AosRoleDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="AosRolePO">
		INSERT INTO base_role (
		<if test="name_ != null and name_ != ''">
	         name_, <!-- 角色名称 -->
		</if>
		<if test="is_enable_ != null and is_enable_ != ''">
	         is_enable_, <!-- 是否启用 -->
		</if>
		<if test="type_ != null and type_ != ''">
	         type_, <!-- 角色类型 -->
		</if>
		<if test="biz_code_ != null and biz_code_ != ''">
	         biz_code_, <!-- 扩展码 -->
		</if>
		<if test="remark_ != null and remark_ != ''">
	         remark_, <!-- 备注 -->
		</if>
		<if test="create_time_ != null and create_time_ != ''">
	         create_time_, <!-- 创建时间 -->
		</if>
		<if test="create_by_ != null and create_by_ != ''">
	         create_by_, <!-- 创建人ID -->
		</if>
		<if test="id_ != null and id_ != ''">
	          id_  <!--  流水号 -->
	   </if>
		)VALUES(
		<if test="name_ != null and name_ != ''">
	          #{name_, jdbcType=VARCHAR}, <!-- 角色名称 -->
	    </if>
		<if test="is_enable_ != null and is_enable_ != ''">
	          #{is_enable_, jdbcType=VARCHAR}, <!-- 是否启用 -->
	    </if>
		<if test="type_ != null and type_ != ''">
	          #{type_, jdbcType=VARCHAR}, <!-- 角色类型 -->
	    </if>
		<if test="biz_code_ != null and biz_code_ != ''">
	          #{biz_code_, jdbcType=VARCHAR}, <!-- 扩展码 -->
	    </if>
		<if test="remark_ != null and remark_ != ''">
	          #{remark_, jdbcType=VARCHAR}, <!-- 备注 -->
	    </if>
		<if test="create_time_ != null and create_time_ != ''">
	          #{create_time_, jdbcType=VARCHAR}, <!-- 创建时间 -->
	    </if>
		<if test="create_by_ != null and create_by_ != ''">
	          #{create_by_, jdbcType=VARCHAR}, <!-- 创建人ID -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!--  流水号 -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="AosRolePO">
		INSERT INTO base_role (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=VARCHAR},  <!--  流水号 -->
		    #{name_, jdbcType=VARCHAR},  <!-- 角色名称 -->
		    #{is_enable_, jdbcType=VARCHAR},  <!-- 是否启用 -->
		    #{type_, jdbcType=VARCHAR},  <!-- 角色类型 -->
		    #{biz_code_, jdbcType=VARCHAR},  <!-- 扩展码 -->
		    #{remark_, jdbcType=VARCHAR},  <!-- 备注 -->
		    #{create_time_, jdbcType=VARCHAR},  <!-- 创建时间 -->
		    #{create_by_, jdbcType=VARCHAR}  <!-- 创建人ID -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="AosRolePO">
		UPDATE base_role
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=VARCHAR},  <!--  流水号 -->
			</if>
			<if test="name_ != null">
		          name_ = #{name_, jdbcType=VARCHAR},  <!-- 角色名称 -->
			</if>
			<if test="is_enable_ != null">
		          is_enable_ = #{is_enable_, jdbcType=VARCHAR},  <!-- 是否启用 -->
			</if>
			<if test="type_ != null">
		          type_ = #{type_, jdbcType=VARCHAR},  <!-- 角色类型 -->
			</if>
			<if test="biz_code_ != null">
		          biz_code_ = #{biz_code_, jdbcType=VARCHAR},  <!-- 扩展码 -->
			</if>
			<if test="remark_ != null">
		          remark_ = #{remark_, jdbcType=VARCHAR},  <!-- 备注 -->
			</if>
			<if test="create_time_ != null">
		          create_time_ = #{create_time_, jdbcType=VARCHAR},  <!-- 创建时间 -->
			</if>
			<if test="create_by_ != null">
		          create_by_ = #{create_by_, jdbcType=VARCHAR},  <!-- 创建人ID -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM base_role WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="AosRolePO">
		SELECT
		<include refid="column" />
		FROM base_role WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="AosRolePO">
		SELECT
		    <include refid="column" />
		FROM base_role
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="AosRolePO">
		SELECT
			<include refid="column" />	
		FROM base_role
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="AosRolePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM base_role
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="AosRolePO">
		SELECT
			<include refid="column" />	
		FROM base_role
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="AosRolePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM base_role
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM base_role
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM base_role
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!--  流水号 -->
		  name_,  <!-- 角色名称 -->
		  is_enable_,  <!-- 是否启用 -->
		  type_,  <!-- 角色类型 -->
		  biz_code_,  <!-- 扩展码 -->
		  remark_,  <!-- 备注 -->
		  create_time_,  <!-- 创建时间 -->
		  create_by_  <!-- 创建人ID -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  base_role.id_,  <!--  流水号 -->
		  base_role.name_,  <!-- 角色名称 -->
		  base_role.is_enable_,  <!-- 是否启用 -->
		  base_role.type_,  <!-- 角色类型 -->
		  base_role.biz_code_,  <!-- 扩展码 -->
		  base_role.remark_,  <!-- 备注 -->
		  base_role.create_time_,  <!-- 创建时间 -->
		  base_role.create_by_  <!-- 创建人ID -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!--  流水号 -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ = #{name_}  <!-- 角色名称 -->
		</if>
	    <if test="is_enable_ != null and is_enable_ != ''">
		      AND is_enable_ = #{is_enable_}  <!-- 是否启用 -->
		</if>
	    <if test="type_ != null and type_ != ''">
		      AND type_ = #{type_}  <!-- 角色类型 -->
		</if>
	    <if test="biz_code_ != null and biz_code_ != ''">
		      AND biz_code_ = #{biz_code_}  <!-- 扩展码 -->
		</if>
	    <if test="remark_ != null and remark_ != ''">
		      AND remark_ = #{remark_}  <!-- 备注 -->
		</if>
	    <if test="create_time_ != null and create_time_ != ''">
		      AND create_time_ = #{create_time_}  <!-- 创建时间 -->
		</if>
	    <if test="create_by_ != null and create_by_ != ''">
		      AND create_by_ = #{create_by_}  <!-- 创建人ID -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!--  流水号 -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ like '%${name_}%'  <!-- 角色名称 -->
		</if>
	    <if test="is_enable_ != null and is_enable_ != ''">
		      AND is_enable_ like '%${is_enable_}%'  <!-- 是否启用 -->
		</if>
	    <if test="type_ != null and type_ != ''">
		      AND type_ like '%${type_}%'  <!-- 角色类型 -->
		</if>
	    <if test="biz_code_ != null and biz_code_ != ''">
		      AND biz_code_ like '%${biz_code_}%'  <!-- 扩展码 -->
		</if>
	    <if test="remark_ != null and remark_ != ''">
		      AND remark_ like '%${remark_}%'  <!-- 备注 -->
		</if>
	    <if test="create_time_ != null and create_time_ != ''">
		      AND create_time_ like '%${create_time_}%'  <!-- 创建时间 -->
		</if>
	    <if test="create_by_ != null and create_by_ != ''">
		      AND create_by_ like '%${create_by_}%'  <!-- 创建人ID -->
		</if>
	</sql>
	
</mapper>