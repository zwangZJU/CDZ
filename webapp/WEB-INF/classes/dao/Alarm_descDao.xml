<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- alarm_desc[alarm_desc]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2018-08-10 16:39:36 -->
<mapper namespace="dao.Alarm_descDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="po.Alarm_descPO">
		INSERT INTO alarm_desc (
		<if test="eee != null and eee != ''">
	         eee, <!-- 报警代码 -->
		</if>
		<if test="alarm_type != null and alarm_type != ''">
	         alarm_type, <!-- 报警类型 -->
		</if>
		<if test="id_ != null and id_ != ''">
	          id_  <!-- id -->
	   </if>
		)VALUES(
		<if test="eee != null and eee != ''">
	          #{eee, jdbcType=VARCHAR}, <!-- 报警代码 -->
	    </if>
		<if test="alarm_type != null and alarm_type != ''">
	          #{alarm_type, jdbcType=VARCHAR}, <!-- 报警类型 -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!-- id -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="po.Alarm_descPO">
		INSERT INTO alarm_desc (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=VARCHAR},  <!-- id -->
		    #{eee, jdbcType=VARCHAR},  <!-- 报警代码 -->
		    #{alarm_type, jdbcType=VARCHAR}  <!-- 报警类型 -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="po.Alarm_descPO">
		UPDATE alarm_desc
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=VARCHAR},  <!-- id -->
			</if>
			<if test="eee != null">
		          eee = #{eee, jdbcType=VARCHAR},  <!-- 报警代码 -->
			</if>
			<if test="alarm_type != null">
		          alarm_type = #{alarm_type, jdbcType=VARCHAR},  <!-- 报警类型 -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM alarm_desc WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="po.Alarm_descPO">
		SELECT
		<include refid="column" />
		FROM alarm_desc WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="po.Alarm_descPO">
		SELECT
		    <include refid="column" />
		FROM alarm_desc
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="po.Alarm_descPO">
		SELECT
			<include refid="column" />	
		FROM alarm_desc
		<where>
		    <include refid="equal" />
		</where>
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="po.Alarm_descPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM alarm_desc
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="po.Alarm_descPO">
		SELECT
			<include refid="column" />	
		FROM alarm_desc
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="po.Alarm_descPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM alarm_desc
		<where>
		    <include refid="like" />
		</where>	
		
		
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM alarm_desc
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM alarm_desc
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id -->
		  eee,  <!-- 报警代码 -->
		  alarm_type  <!-- 报警类型 -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  alarm_desc.id_,  <!-- id -->
		  alarm_desc.eee,  <!-- 报警代码 -->
		  alarm_desc.alarm_type  <!-- 报警类型 -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!-- id -->
		</if>
	    <if test="eee != null and eee != ''">
		      AND eee = #{eee}  <!-- 报警代码 -->
		</if>
	    <if test="alarm_type != null and alarm_type != ''">
		      AND alarm_type = #{alarm_type}  <!-- 报警类型 -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!-- id -->
		</if>
	    <if test="eee != null and eee != ''">
		      AND eee like '%${eee}%'  <!-- 报警代码 -->
		</if>
	    <if test="alarm_type != null and alarm_type != ''">
		      AND alarm_type like '%${alarm_type}%'  <!-- 报警类型 -->
		</if>
	</sql>
	
</mapper>