<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- base_params[base_params]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2016-12-25 00:57:58 -->
<mapper namespace="aos.framework.dao.AosParamsDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="AosParamsPO">
		INSERT INTO base_params (
		<if test="name_ != null and name_ != ''">
	         name_, <!-- 参数名称 -->
		</if>
		<if test="key_ != null and key_ != ''">
	         key_, <!-- 参数键 -->
		</if>
		<if test="value_ != null and value_ != ''">
	         value_, <!-- 参数值 -->
		</if>
		<if test="group_ != null and group_ != ''">
	         group_, <!-- 分组 -->
		</if>
		<if test="remark_ != null and remark_ != ''">
	         remark_, <!-- 备注 -->
		</if>
		<if test="id_ != null and id_ != ''">
	          id_  <!-- 流水号 -->
	   </if>
		)VALUES(
		<if test="name_ != null and name_ != ''">
	          #{name_, jdbcType=VARCHAR}, <!-- 参数名称 -->
	    </if>
		<if test="key_ != null and key_ != ''">
	          #{key_, jdbcType=VARCHAR}, <!-- 参数键 -->
	    </if>
		<if test="value_ != null and value_ != ''">
	          #{value_, jdbcType=VARCHAR}, <!-- 参数值 -->
	    </if>
		<if test="group_ != null and group_ != ''">
	          #{group_, jdbcType=VARCHAR}, <!-- 分组 -->
	    </if>
		<if test="remark_ != null and remark_ != ''">
	          #{remark_, jdbcType=VARCHAR}, <!-- 备注 -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!-- 流水号 -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="AosParamsPO">
		INSERT INTO base_params (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=VARCHAR},  <!-- 流水号 -->
		    #{name_, jdbcType=VARCHAR},  <!-- 参数名称 -->
		    #{key_, jdbcType=VARCHAR},  <!-- 参数键 -->
		    #{value_, jdbcType=VARCHAR},  <!-- 参数值 -->
		    #{group_, jdbcType=VARCHAR},  <!-- 分组 -->
		    #{remark_, jdbcType=VARCHAR}  <!-- 备注 -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="AosParamsPO">
		UPDATE base_params
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=VARCHAR},  <!-- 流水号 -->
			</if>
			<if test="name_ != null">
		          name_ = #{name_, jdbcType=VARCHAR},  <!-- 参数名称 -->
			</if>
			<if test="key_ != null">
		          key_ = #{key_, jdbcType=VARCHAR},  <!-- 参数键 -->
			</if>
			<if test="value_ != null">
		          value_ = #{value_, jdbcType=VARCHAR},  <!-- 参数值 -->
			</if>
			<if test="group_ != null">
		          group_ = #{group_, jdbcType=VARCHAR},  <!-- 分组 -->
			</if>
			<if test="remark_ != null">
		          remark_ = #{remark_, jdbcType=VARCHAR},  <!-- 备注 -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM base_params WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="AosParamsPO">
		SELECT
		<include refid="column" />
		FROM base_params WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="AosParamsPO">
		SELECT
		    <include refid="column" />
		FROM base_params
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="AosParamsPO">
		SELECT
			<include refid="column" />	
		FROM base_params
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="AosParamsPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM base_params
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="AosParamsPO">
		SELECT
			<include refid="column" />	
		FROM base_params
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="AosParamsPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM base_params
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM base_params
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM base_params
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- 流水号 -->
		  name_,  <!-- 参数名称 -->
		  key_,  <!-- 参数键 -->
		  value_,  <!-- 参数值 -->
		  group_,  <!-- 分组 -->
		  remark_  <!-- 备注 -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  base_params.id_,  <!-- 流水号 -->
		  base_params.name_,  <!-- 参数名称 -->
		  base_params.key_,  <!-- 参数键 -->
		  base_params.value_,  <!-- 参数值 -->
		  base_params.group_,  <!-- 分组 -->
		  base_params.remark_  <!-- 备注 -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!-- 流水号 -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ = #{name_}  <!-- 参数名称 -->
		</if>
	    <if test="key_ != null and key_ != ''">
		      AND key_ = #{key_}  <!-- 参数键 -->
		</if>
	    <if test="value_ != null and value_ != ''">
		      AND value_ = #{value_}  <!-- 参数值 -->
		</if>
	    <if test="group_ != null and group_ != ''">
		      AND group_ = #{group_}  <!-- 分组 -->
		</if>
	    <if test="remark_ != null and remark_ != ''">
		      AND remark_ = #{remark_}  <!-- 备注 -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!-- 流水号 -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ like '%${name_}%'  <!-- 参数名称 -->
		</if>
	    <if test="key_ != null and key_ != ''">
		      AND key_ like '%${key_}%'  <!-- 参数键 -->
		</if>
	    <if test="value_ != null and value_ != ''">
		      AND value_ like '%${value_}%'  <!-- 参数值 -->
		</if>
	    <if test="group_ != null and group_ != ''">
		      AND group_ like '%${group_}%'  <!-- 分组 -->
		</if>
	    <if test="remark_ != null and remark_ != ''">
		      AND remark_ like '%${remark_}%'  <!-- 备注 -->
		</if>
	</sql>
	
</mapper>